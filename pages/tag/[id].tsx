import type { NextPage } from 'next';
import Head from 'next/head';
import {
	Avatar,
	Button,
	Container,
	Divider,
	Flex,
	Heading,
	HStack,
	Stack,
	Text
} from '@chakra-ui/react';
import { tags } from '../../config';
import { TagButton } from '../../components/tag';
import { tags as configTags } from '../../config';
import { useEffect, useRef, useState } from 'react';
import { Icon } from '../../components/icon';
import { useRouter } from 'next/router';
import { UpperCase } from '../../lib/functions';
import { BotApplication } from '../../schemas/Bot';
import axios from 'axios';
import { ChevronUpIcon, StarIcon } from '@chakra-ui/icons';
import { Link } from '../../components/link';

const Home: NextPage<{ randomTag: string }> = ({
	randomTag
}: {
	randomTag: string;
}) => {
	const router = useRouter();
	const ref = useRef<HTMLDivElement>(null);
	const [currTag, setCurrTag] = useState('random');
	const [bots, setBots] = useState<BotApplication[]>([]);
	const [sort, setSort] = useState<'votes' | 'created'>('votes');

	useEffect(() => {
		axios.get('/api/bots').then(({ data }) => {
			setBots(
				(data.data as BotApplication[]).filter(b => b.state == 'approved')
			);
		});
	}, []);

	useEffect(() => {
		const tag = decodeURIComponent(router.asPath.split('/')[2]!).toLowerCase();
		if (!configTags.includes(tag)) return void router.push('/');
		setCurrTag(tag);
	}, [router.asPath]);

	return (
		<Container mt={10} maxW={'container.xl'}>
			<Head>
				<title>{`${UpperCase(currTag)} - Pubertland BotList`}</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Flex gap={5} py={5} px={[2, 10]} flexDir="column">
				<Heading>Explora bots de #{currTag}</Heading>
				<HStack>
					<Button
						display={['none', 'block']}
						rounded={'full'}
						onClick={() =>
							ref.current!.scrollTo({
								left: ref.current!.scrollLeft - 100,
								behavior: 'smooth'
							})
						}
					>
						<Icon id={'arrow-left'} />
					</Button>
					<HStack ref={ref} overflowX={'auto'} overflowY={'hidden'} spacing={5}>
						{tags.map((t, i) => (
							<TagButton tagName={t} key={i} focus={t == currTag} />
						))}
					</HStack>
					<Button
						rounded={'full'}
						display={['none', 'block']}
						onClick={() =>
							ref.current!.scroll({
								left: ref.current!.scrollLeft + 100,
								behavior: 'smooth'
							})
						}
					>
						<Icon id={'arrow-right'} />
					</Button>
				</HStack>
			</Flex>
			<Flex gap={0} py={5} px={[2, 10]} flexDir="column">
				<Flex justify={'space-between'} align="center">
					{bots.filter(b => b.tags.includes(currTag)).length ? (
						<>
							<Heading as="h3" fontSize="2xl">
								Bots {sort == 'votes' ? 'populares' : 'recientes'}
							</Heading>
							<Button
								onClick={() => setSort(sort == 'created' ? 'votes' : 'created')}
							>
								{sort == 'votes' ? (
									<>
										<Icon id="sparkles" m="Right" pt={'5px'} /> Ver Nuevos
									</>
								) : (
									<>
										<Icon id="fire" m="Right" pt={'5px'} /> Ver Populares
									</>
								)}
							</Button>
						</>
					) : (
						<>No hay bots para mostrar :c</>
					)}
				</Flex>
				<Stack w="full" my={5}>
					{bots
						.sort((x, y) =>
							sort == 'votes'
								? y.votes.length - x.votes.length
								: y.createdAt - x.createdAt
						)
						.filter(b => b.tags.includes(currTag))
						.slice(0, 50)
						.map((b, i) => (
							/*<BotCard bot={b} key={i} />*/
							<Stack
								rounded={'xl'}
								p={3}
								direction={['column', 'column', 'row']}
								align="center"
								key={i}
								gap={3}
								bg="blackAlpha.400"
							>
								<Stack direction={'row'} w="full" gap={3} align="center">
									<Avatar
										size="lg"
										bg="gray.900"
										src={b.avatarURL}
										name={b.username}
									/>
									<Stack w="full">
										<Stack direction="row" w="100%" justify={'space-between'}>
											<Stack spacing={1}>
												<Stack
													w="full"
													direction="row"
													justify={'space-between'}
												>
													<Link href={`/bots/${b.id}`}>
														<Heading
															cursor="pointer"
															noOfLines={1}
															as="h4"
															fontSize="xl"
														>
															{b.username}
														</Heading>
													</Link>
												</Stack>
												<Stack direction={'row'} gap={3}>
													<Stack direction={'row'} gap={2}>
														<Text
															fontSize="xs"
															display={'flex'}
															alignItems="center"
															gap={1}
														>
															<StarIcon
																fontSize={'sm'}
																color="red.900"
																strokeWidth={'2px'}
																stroke="red.400"
															/>
															{Math.round(
																(b.comments.reduce((a, c) => a + c.stars, 0) /
																	b.comments.length || 0) * 100
															) / 100}
														</Text>
														<Text
															fontSize="xs"
															display={'flex'}
															alignItems="center"
															gap={1}
														>
															<ChevronUpIcon
																fontSize={'sm'}
																color="red.900"
																strokeWidth={'2px'}
																stroke="red.400"
															/>
															{
																b.votes.filter(v => v.expires > Date.now())
																	.length
															}
														</Text>
													</Stack>
													<Divider
														orientation="vertical"
														borderWidth={'1px'}
														h="initial"
														borderColor="#fff3"
													/>
													<Stack
														direction="row"
														display={['none', 'none', 'flex']}
													>
														{b.tags.slice(0, 2).map((t, i) => (
															<TagButton
																ht
																tagName={t}
																key={i}
																h="auto"
																p={1}
																fontSize="sm"
															/>
														))}
														{b.tags.length - 2 > 0 && (
															<TagButton
																disabled
																ht
																tagName={`+${b.tags.length - 2}`}
																key={i}
																h="auto"
																p={1}
																fontSize="sm"
															/>
														)}
													</Stack>
												</Stack>
											</Stack>
										</Stack>
										<Text
											noOfLines={[2, 2, 1]}
											color="gray.400"
											fontSize="sm"
											overflowWrap="break-word"
											wordBreak={'break-word'}
										>
											{b.shortDescription}
										</Text>
									</Stack>
								</Stack>
								<Stack
									w={['full', 'full', 'auto']}
									direction={['row', 'row', 'column']}
									h={'auto'}
								>
									<Link href={b.inviteURL} w="full">
										<Button w="full" rounded="xl">
											Invitar
										</Button>
									</Link>
									<Link href={`/bots/${b.id}?vote=true`} w="full">
										<Button w="full" rounded="xl" cursor={'pointer'}>
											Votar (
											{b.votes.filter(v => v.expires > Date.now()).length})
										</Button>
									</Link>
								</Stack>
							</Stack>
						))}
				</Stack>
			</Flex>
		</Container>
	);
};

export async function getServerSideProps() {
	const randomTag = configTags[~~(Math.random() * configTags.length)];
	return { props: { randomTag } };
}

export default Home;
